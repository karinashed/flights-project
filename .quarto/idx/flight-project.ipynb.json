{"title":"Import flight data","markdown":{"yaml":{"title":"Import flight data"},"headingText":"Check out the data","containsRefs":false,"markdown":"\n\n\n\nAll flights from Moscow between May 24 - June 24, 2023 (pulled from Icarus)\n\n\n\n\n### Show all origin locations\nThe \"Moscow\" search on Icarus includes flights from cities near Moscow\n\n#### Group together Moskovsskaya and Moskva to make \"Moscow\"\n\n\n### Show all destination countries\n\n### All destination 'areas'\n\n### Clean the destination names in the df\n\n### Make new df that combines area and country for map viz\n\n# Scraping from Radarbox for more plane details\n\nThe first attempt at scraping from Radarbox resulted in a number of blank pages, meaning Radarbox doesn't have webpages or data on some of the ICAOs. I found that, in some cases, it's because some ICAOs are missing a '0' at the front. To maximize the number of pages pulled from Radarbox, I put a '0' in front of every ICAO with fewer than 6 characters. \n\n#### Add a 0 to the front of every icao < 6 characters\n\n### Pull all unique ICAOs to use to scrape Radarbox profiles for plane tail numbers and type  \nRadarbox urls are formatted ``https://www.radarbox.com/data/mode-s/{ICAO}``\n\n### Save the html for each available Radarbox page, which contains info on the planes tail number and make/model\n\n### Check for all htmls that didn't scrape properly (based on file size) and delete them from the directory  \nAll htmls without detailed plane information on Radarbox are < 252,000 bytes  \n_output is currently blank because I re-ran the code_\n\n### Scrape tail number and plane type from Radarbox page for each ICAO\n\n#### Check which planes had a Radarbox page but still missing tail and plane type\n\n### Read in csv of ICAO, tail and plane type for all planes identified manually  \n_Since there were only 22, I manually checked all ICAOs without info in Radarbox and created a separate csv_  \nThe link to the data sources can be found in the csv file in the directory\n\n#### Make new df that combines scraped plane info with manually identified plane info\n\n#### List of remaining ICAOs that couldn't be identified manually or by scraping Radarbox \n\n## Use tail number to analyze where each plane was registered  \nUsually the beginning of a tail number indicates the registration country\n\n#### Make new column for beginning characters of tail number\n\n#### Print all planes where registration country can't be determined automatically (to be checked manually)\n\n## Scrape the Wikipedia page that defines which country each registration prefix belongs to\n\n#### Make new dataframe that specifies the country associated with each registration prefix in the flight data \n\n#### .... B- is being attributed to China and Taiwan   \nAccording to the Wikipedia page, China is B- followed by 4 numbers and Taiwan is B- followed by 5 numbers  \n\n#### All in this case are followed by 4 characters, so all are registered in China, not Taiwan\n\n# Use ChatGPT to analyze the plane type\n\n### Make df that combines plane type with registration and country\n\n### Export as html to turn into DataTables table for filtering and querying\n\n### Check where the private planes are registered\n\n#### Change country to get more info on plane registered in specified country\n\n###  Check where the military planes are registered\n\n#### Change country to get more info on military plane registered in specified country\n\n## Create df that combines all flight info with identifying info\n\n### Export as html to turn into DataTables table\n","srcMarkdownNoYaml":"\n\n\n\nAll flights from Moscow between May 24 - June 24, 2023 (pulled from Icarus)\n\n\n\n# Check out the data\n\n### Show all origin locations\nThe \"Moscow\" search on Icarus includes flights from cities near Moscow\n\n#### Group together Moskovsskaya and Moskva to make \"Moscow\"\n\n\n### Show all destination countries\n\n### All destination 'areas'\n\n### Clean the destination names in the df\n\n### Make new df that combines area and country for map viz\n\n# Scraping from Radarbox for more plane details\n\nThe first attempt at scraping from Radarbox resulted in a number of blank pages, meaning Radarbox doesn't have webpages or data on some of the ICAOs. I found that, in some cases, it's because some ICAOs are missing a '0' at the front. To maximize the number of pages pulled from Radarbox, I put a '0' in front of every ICAO with fewer than 6 characters. \n\n#### Add a 0 to the front of every icao < 6 characters\n\n### Pull all unique ICAOs to use to scrape Radarbox profiles for plane tail numbers and type  \nRadarbox urls are formatted ``https://www.radarbox.com/data/mode-s/{ICAO}``\n\n### Save the html for each available Radarbox page, which contains info on the planes tail number and make/model\n\n### Check for all htmls that didn't scrape properly (based on file size) and delete them from the directory  \nAll htmls without detailed plane information on Radarbox are < 252,000 bytes  \n_output is currently blank because I re-ran the code_\n\n### Scrape tail number and plane type from Radarbox page for each ICAO\n\n#### Check which planes had a Radarbox page but still missing tail and plane type\n\n### Read in csv of ICAO, tail and plane type for all planes identified manually  \n_Since there were only 22, I manually checked all ICAOs without info in Radarbox and created a separate csv_  \nThe link to the data sources can be found in the csv file in the directory\n\n#### Make new df that combines scraped plane info with manually identified plane info\n\n#### List of remaining ICAOs that couldn't be identified manually or by scraping Radarbox \n\n## Use tail number to analyze where each plane was registered  \nUsually the beginning of a tail number indicates the registration country\n\n#### Make new column for beginning characters of tail number\n\n#### Print all planes where registration country can't be determined automatically (to be checked manually)\n\n## Scrape the Wikipedia page that defines which country each registration prefix belongs to\n\n#### Make new dataframe that specifies the country associated with each registration prefix in the flight data \n\n#### .... B- is being attributed to China and Taiwan   \nAccording to the Wikipedia page, China is B- followed by 4 numbers and Taiwan is B- followed by 5 numbers  \n\n#### All in this case are followed by 4 characters, so all are registered in China, not Taiwan\n\n# Use ChatGPT to analyze the plane type\n\n### Make df that combines plane type with registration and country\n\n### Export as html to turn into DataTables table for filtering and querying\n\n### Check where the private planes are registered\n\n#### Change country to get more info on plane registered in specified country\n\n###  Check where the military planes are registered\n\n#### Change country to get more info on military plane registered in specified country\n\n## Create df that combines all flight info with identifying info\n\n### Export as html to turn into DataTables table\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"flight-project.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","resources":["images/*"],"linkcolor":"red","theme":"lux","title":"Import flight data"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}