[
  {
    "objectID": "flight-project.html",
    "href": "flight-project.html",
    "title": "Import flight data",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport re\nimport time\nimport matplotlib.pyplot as plt\nAll flights from Moscow between May 24 - June 24, 2023 (pulled from Icarus)\ndf = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/icarus_flights.csv\")\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9026 entries, 0 to 9025\nData columns (total 10 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   icao                 9026 non-null   object\n 1   call_sign            8566 non-null   object\n 2   start_time           9026 non-null   object\n 3   end_time             9026 non-null   object\n 4   origin_area          9026 non-null   object\n 5   origin_country       9026 non-null   object\n 6   destination_area     8433 non-null   object\n 7   destination_country  8429 non-null   object\n 8   aircraft_model       1950 non-null   object\n 9   aircraft_model_code  1950 non-null   object\ndtypes: object(10)\nmemory usage: 705.3+ KB"
  },
  {
    "objectID": "flight-project.html#use-tail-number-to-analyze-where-each-plane-was-registered",
    "href": "flight-project.html#use-tail-number-to-analyze-where-each-plane-was-registered",
    "title": "Import flight data",
    "section": "Use tail number to analyze where each plane was registered",
    "text": "Use tail number to analyze where each plane was registered\nUsually the beginning of a tail number indicates the registration country\n\nMake new column for beginning characters of tail number\n\n# Check if the \"tail\" column contains a hyphen\nhas_hyphen = updated_plane_df['tail'].str.contains('-')\n\n# Extract the characters before the hyphen \nextracted_tail = updated_plane_df['tail'].str.extract(r'^(.*?)(?:-|$)')\n\n# For rows without hyphen, extract the first two letters that come *before numbers* in the \"tail\" column\nextracted_first_two_letters = updated_plane_df.loc[~has_hyphen, 'tail'].str.extract(r'^([A-Za-z]{2})\\d{2}')\n\n# Combine the extracted values and store them in a new \"tail_prefix\" column\nupdated_plane_df['tail_prefix'] = extracted_tail.where(has_hyphen, extracted_first_two_letters)\n\n# Set the values in the \"tail_prefix\" column to empty strings for rows that don't have hyphen or 2 letters followed by numbers\nupdated_plane_df.loc[~has_hyphen & updated_plane_df['tail_prefix'].isna(), 'tail_prefix'] = ''\n\n\n\nPrint all planes where registration country can’t be determined automatically (to be checked manually)\n\noutlier_tails = updated_plane_df[updated_plane_df['tail_prefix'] == '']\noutlier_tails\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\n\n\n\n\n86\n60003c\n701\nAirbus A319-132\n\n\n\n176\n155c40\n89152\nSukhoi Superjet 100-95B\n\n\n\n304\n466b38\n\n-\n\n\n\n514\n032091\n\n-\n\n\n\n580\n053977\nVARIOUS\nSeveral Different Aircraft\n\n\n\n682\n600be9\n\n-\n\n\n\n718\nea000f\n\n-\n\n\n\n775\n26002b\n\n-\n\n\n\n837\n1f3395\n78741\nIlyushin Il-78M-90A"
  },
  {
    "objectID": "flight-project.html#scrape-the-wikipedia-page-that-defines-which-country-each-registration-prefix-belongs-to",
    "href": "flight-project.html#scrape-the-wikipedia-page-that-defines-which-country-each-registration-prefix-belongs-to",
    "title": "Import flight data",
    "section": "Scrape the Wikipedia page that defines which country each registration prefix belongs to",
    "text": "Scrape the Wikipedia page that defines which country each registration prefix belongs to\n\nprefix_html = requests.get(\"https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes\").text\nprefix_soup = BeautifulSoup(prefix_html)\n\n\n#select the right table on the page\ntable = prefix_soup.select(\"table\")[1]\ntable.text[:100]\n\n'\\n\\nCountry or region\\n\\nRegistration prefix\\n\\nPresentation and notes\\n\\n\\nAfghanistan\\n\\nYA[1]\\n\\nYA-AAA to YA-'\n\n\n\n#select the first row from the table\nheader = table.select(\"tr\")[0]\nheader\n\n&lt;tr&gt;\n&lt;th scope=\"col\"&gt;Country or region\n&lt;/th&gt;\n&lt;th scope=\"col\"&gt;Registration prefix\n&lt;/th&gt;\n&lt;th class=\"unsortable\" scope=\"col\"&gt;Presentation and notes\n&lt;/th&gt;&lt;/tr&gt;\n\n\n\n#extract the column names from the header\nprefix_header = [ head.text.strip() for head in header.select(\"th\") ]\nprefix_header\n\n['Country or region', 'Registration prefix', 'Presentation and notes']\n\n\n\n#select all non-header rows from the table\nrow_els = table.select(\"tbody tr\")[1:] #skip the first row, which is the header\nlen(row_els)\n\n240\n\n\n\n#extract the text from each row into a python list\n\nprefix_entries = [\n    [cell.text.strip() for cell in row.select(\"td\")]\n    for row in row_els\n]\n\nprefix_entries[0]\n\n['Afghanistan', 'YA[1]', 'YA-AAA to YA-ZZZ.']\n\n\n\n#turn the extracted data into a dataframe\nprefix_df = pd.DataFrame(prefix_entries, columns=prefix_header)\nprefix_df.head()\n\n\n\n\n\n\n\n\nCountry or region\nRegistration prefix\nPresentation and notes\n\n\n\n\n0\nAfghanistan\nYA[1]\nYA-AAA to YA-ZZZ.\n\n\n1\nAlbania\nZA[2]\nZA-AAA to ZA-ZZZ.\n\n\n2\nAlgeria\n7T[3]\n7T-VAA to 7T-VZZ Civilian.\\n7T-WAA to 7T-WZZ M...\n\n\n3\nAndorra\nC3[2]\nC3-AAA to C3-ZZZ\n\n\n4\nAngola\nD2[3]\nD2-AAA to D2-ZZZ. Colonial allocation CR-L.\n\n\n\n\n\n\n\n\n#drop the brackets and number within each bracket from the 'Registration prefix' column\nprefix_df['Registration prefix'] = prefix_df['Registration prefix'].str.replace(r'\\s*\\[.*?\\]$', '', regex=True)\n\n\nprefix_df.head()\n\n\n\n\n\n\n\n\nCountry or region\nRegistration prefix\nPresentation and notes\n\n\n\n\n0\nAfghanistan\nYA\nYA-AAA to YA-ZZZ.\n\n\n1\nAlbania\nZA\nZA-AAA to ZA-ZZZ.\n\n\n2\nAlgeria\n7T\n7T-VAA to 7T-VZZ Civilian.\\n7T-WAA to 7T-WZZ M...\n\n\n3\nAndorra\nC3\nC3-AAA to C3-ZZZ\n\n\n4\nAngola\nD2\nD2-AAA to D2-ZZZ. Colonial allocation CR-L.\n\n\n\n\n\n\n\n\nMake new dataframe that specifies the country associated with each registration prefix in the flight data\n\nreg_country_df = pd.merge(updated_plane_df, prefix_df, left_on='tail_prefix', right_on='Registration prefix', how='inner')\n\n\n#Drop the extra columns after the merge\nreg_country_df = reg_country_df.drop(columns=[\"Registration prefix\", \"Presentation and notes\"])\n#Make sure the country listed for the blank tail_prefix is also blank\nreg_country_df.loc[reg_country_df['tail_prefix'] == '', 'Country or region'] = ''\nreg_country_df\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\nCountry or region\n\n\n\n\n0\n151d9c\nRA-73116\nBoeing 737-8LJ\nRA\nRussia\n\n\n1\n15206f\nRA-73839\nAirbus A321-251NX\nRA\nRussia\n\n\n2\n151d77\nRA-73079\nBoeing 767-3Y0ER\nRA\nRussia\n\n\n3\n14f110\nRA-61712\nAntonov An-148-100EA\nRA\nRussia\n\n\n4\n151e32\nRA-73266\nBoeing 737-83N\nRA\nRussia\n\n\n...\n...\n...\n...\n...\n...\n\n\n1078\n51408c\n4L-GTI\nBoeing 737-7CT\n4L\nGeorgia\n\n\n1079\n09a055\nC5-SUV\nEmbraer ERJ 135BJ Legacy 650\nC5\nGambia\n\n\n1080\n504e64\nER-00006\nAirbus A320-232\nER\nMoldova\n\n\n1081\n515313\nEY-787\nBoeing 737-8GJ\nEY\nTajikistan\n\n\n1082\n06a0b3\nA7-BCO\nBoeing 787-8\nA7\nQatar\n\n\n\n\n1083 rows × 5 columns\n\n\n\n\n\n…. B- is being attributed to China and Taiwan\nAccording to the Wikipedia page, China is B- followed by 4 numbers and Taiwan is B- followed by 5 numbers\n\n#Check all tail numbers that start with B\nupdated_plane_df[updated_plane_df['tail_prefix'] == 'B']\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\n\n\n\n\n21\n78122f\nB-8862\nAirbus A330-343E\nB\n\n\n44\n78076e\nB-2088\nBoeing 777-39LER\nB\n\n\n56\n781094\nB-8678\nAirbus A330-343E\nB\n\n\n73\n78139f\nB-1096\nAirbus A330-343E\nB\n\n\n74\n7808cb\nB-2033\nBoeing 777-39LER\nB\n\n\n90\n781364\nB-1065\nAirbus A330-343E\nB\n\n\n91\n7816bd\nB-308P\nAirbus A330-243F\nB\n\n\n149\n7810fb\nB-8959\nAirbus A330-243\nB\n\n\n160\n780e2e\nB-8015\nAirbus A330-343\nB\n\n\n169\n7808cc\nB-2035\nBoeing 777-39LER\nB\n\n\n187\n7809ef\nB-5923\nAirbus A330-343E\nB\n\n\n191\n780bf8\nB-2047\nBoeing 777-39LER\nB\n\n\n211\n780bb9\nB-2098\nBoeing 777-FFT\nB\n\n\n214\n78076d\nB-2087\nBoeing 777-39LER\nB\n\n\n244\n780094\nB-6095\nAirbus A330-343X\nB\n\n\n291\n781335\nB-1041\nAirbus A330-343E\nB\n\n\n364\n78147a\nB-300U\nAirbus A330-343E\nB\n\n\n404\n78076b\nB-2085\nBoeing 777-39LER\nB\n\n\n414\n781590\nB-304K\nAirbus A330-343\nB\n\n\n441\n780c5b\nB-2091\nBoeing 777-FFT\nB\n\n\n462\n780b2a\nB-8271\nGulfstream Aerospace GIV-X (G450)\nB\n\n\n489\n781230\nB-8863\nAirbus A330-343E\nB\n\n\n518\n7816a1\nB-308L\nAirbus A330-243F\nB\n\n\n557\n7806e1\nB-6527\nAirbus A330-343X\nB\n\n\n626\n780d8f\nB-2094\nBoeing 777-FFT\nB\n\n\n652\n780301\nB-6085\nAirbus A330-343X\nB\n\n\n696\n7810c6\nB-8776\nAirbus A330-243\nB\n\n\n703\n781479\nB-300V\nAirbus A330-343E\nB\n\n\n724\n780970\nB-2036\nBoeing 777-39LER\nB\n\n\n748\n781273\nB-1340\nBoeing 747-4HAERF\nB\n\n\n757\n781463\nB-300Q\nAirbus A330-343E\nB\n\n\n781\n780b69\nB-5929\nAirbus A330-343E\nB\n\n\n830\n781540\nB-303D\nAirbus A330-343E\nB\n\n\n873\n780bb6\nB-2095\nBoeing 777-FFT\nB\n\n\n874\n781cde\nB-221F\nBoeing 767-33AERSF\nB\n\n\n927\n780022\nB-2089\nBoeing 777-39LER\nB\n\n\n969\n7811fd\nB-8596\nAirbus A330-243\nB\n\n\n993\n78086c\nB-2031\nBoeing 777-39LER\nB\n\n\n994\n780ef8\nB-8287\nAirbus A330-343E\nB\n\n\n1045\n780c9e\nB-2006\nBoeing 777-39LER\nB\n\n\n\n\n\n\n\n\n#Check how many tails that start with B- are followed by 4 characters\ncount_4_characters = updated_plane_df[updated_plane_df['tail'].str.match(r'^B-\\w{4}$')].shape[0]\ncount_4_characters\n\n40\n\n\n\n#Check how many tails that start with B- are followed by 5 characters\ncount_5_characters = updated_plane_df[updated_plane_df['tail'].str.match(r'^B-\\w{5}$')].shape[0]\ncount_5_characters\n\n0\n\n\n\n\nAll in this case are followed by 4 characters, so all are registered in China, not Taiwan\n\n#Drop row from reg_country_df where 'Country or region' = Taiwan\nreg_country_df = reg_country_df[(reg_country_df['Country or region'] != 'Taiwan')]\nreg_country_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 1043 entries, 0 to 1082\nData columns (total 5 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   icao               1043 non-null   object\n 1   tail               1043 non-null   object\n 2   plane              1043 non-null   object\n 3   tail_prefix        1043 non-null   object\n 4   Country or region  1043 non-null   object\ndtypes: object(5)\nmemory usage: 48.9+ KB\n\n\n\nregistration_counts = reg_country_df.groupby('Country or region').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n\nregistration_counts\n\n\n\n\n\n\n\n\nCountry or region\ncount\n\n\n\n\n23\nRussia\n725\n\n\n28\nTurkey\n71\n\n\n30\nUnited Arab Emirates\n64\n\n\n6\nChina\n40\n\n\n31\nUzbekistan\n16\n\n\n16\nKazakhstan\n14\n\n\n8\nEgypt\n13\n\n\n5\nBelarus\n11\n\n\n2\nArmenia\n10\n\n\n0\n\n9\n\n\n3\nAzerbaijan\n9\n\n\n13\nIran\n8\n\n\n24\nSerbia\n7\n\n\n18\nKyrgyzstan\n6\n\n\n14\nIraq\n4\n\n\n15\nIsrael\n4\n\n\n17\nKuwait\n4\n\n\n29\nTurkmenistan\n4\n\n\n20\nMorocco\n3\n\n\n21\nOman\n3\n\n\n1\nAlgeria\n3\n\n\n11\nGeorgia\n2\n\n\n9\nEthiopia\n2\n\n\n25\nSyria\n2\n\n\n4\nBahrain\n1\n\n\n27\nTunisia\n1\n\n\n7\nCzech Republic\n1\n\n\n10\nGambia\n1\n\n\n26\nTajikistan\n1\n\n\n22\nQatar\n1\n\n\n19\nMoldova\n1\n\n\n12\nGermany\n1\n\n\n32\nVenezuela\n1\n\n\n\n\n\n\n\n\nregistration_counts.to_csv(\"reg_country_counts.csv\", index=False)"
  },
  {
    "objectID": "flight-project.html#create-df-that-combines-all-flight-info-with-identifying-info",
    "href": "flight-project.html#create-df-that-combines-all-flight-info-with-identifying-info",
    "title": "Import flight data",
    "section": "Create df that combines all flight info with identifying info",
    "text": "Create df that combines all flight info with identifying info\n\nfinal_flights_df = pd.merge(df, country_type_df, on='icao', how='left')\n\n\nfinal_flights_df.drop(columns=['aircraft_model', 'aircraft_model_code', 'area_country'], inplace=True)\n\n\nfinal_flights_df.rename(columns={'Country or region': 'reg_country', 'type': 'plane_category'}, inplace=True)\n\n\nfinal_flights_df.rename(columns={'plane': 'plane_model'}, inplace=True)\n\n\nfinal_flights_df['max_passengers'] = final_flights_df['max_passengers'].str.upper()\n\n\nfinal_flights_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9026 entries, 0 to 9025\nData columns (total 13 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   icao                 9026 non-null   object\n 1   call_sign            8566 non-null   object\n 2   start_time           9026 non-null   object\n 3   end_time             9026 non-null   object\n 4   origin_area          9026 non-null   object\n 5   origin_country       9026 non-null   object\n 6   destination_area     8433 non-null   object\n 7   destination_country  8429 non-null   object\n 8   tail                 8944 non-null   object\n 9   plane_model          8944 non-null   object\n 10  reg_country          8944 non-null   object\n 11  plane_category       8944 non-null   object\n 12  max_passengers       8919 non-null   object\ndtypes: object(13)\nmemory usage: 916.8+ KB\n\n\n\nExport as html to turn into DataTables table\n\nfull_flight_table = final_flights_df.to_html(index=False)\n\n\nwith open('full_flight_table.html', 'w') as f:\n    f.write(full_flight_table)"
  },
  {
    "objectID": "plane-registration-check.html",
    "href": "plane-registration-check.html",
    "title": "Use tail number to analyze where each plane was registered",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport re\nimport time\ndf = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/all_plane_info.csv\")\ndf.head()\n\n\n\n\n\n\n\n\nicao\ntail\nplane\n\n\n\n\n0\n151d9c\nRA-73116\nBoeing 737-8LJ\n\n\n1\n738057\n4X-EHI\nBoeing 737-958ER\n\n\n2\n15206f\nRA-73839\nAirbus A321-251NX\n\n\n3\n151d77\nRA-73079\nBoeing 767-3Y0ER\n\n\n4\n896411\nA6-AOE\nAirbus A320-214\n\n\n...\n...\n...\n...\n\n\n1047\n155c35\nRA-89141\nSukhoi SuperJet 100-95B\n\n\n1048\n152015\nRA-73749\nAirbus A320-214\n\n\n1049\n151ffa\nRA-73722\nAirbus A321-211\n\n\n1050\n151ed3\nRA-73427\nAirbus A320-271N\n\n\n1051\n4bb855\nTC-NBU\nAirbus A320-251N\n\n\n\n\n1052 rows × 3 columns"
  },
  {
    "objectID": "plane-registration-check.html#scrape-the-wikipedia-page-that-defines-which-country-each-registration-prefix-belongs-to",
    "href": "plane-registration-check.html#scrape-the-wikipedia-page-that-defines-which-country-each-registration-prefix-belongs-to",
    "title": "Use tail number to analyze where each plane was registered",
    "section": "Scrape the Wikipedia page that defines which country each registration prefix belongs to",
    "text": "Scrape the Wikipedia page that defines which country each registration prefix belongs to\n\nprefix_html = requests.get(\"https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes\").text\nprefix_soup = BeautifulSoup(prefix_html)\n\n\n#select the right table on the page\ntable = prefix_soup.select(\"table\")[1]\ntable.text[:100]\n\n'\\n\\nCountry or region\\n\\nRegistration prefix\\n\\nPresentation and notes\\n\\n\\nAfghanistan\\n\\nYA[1]\\n\\nYA-AAA to YA-'\n\n\n\n#select the first row from the table\nheader = table.select(\"tr\")[0]\nheader\n\n&lt;tr&gt;\n&lt;th scope=\"col\"&gt;Country or region\n&lt;/th&gt;\n&lt;th scope=\"col\"&gt;Registration prefix\n&lt;/th&gt;\n&lt;th class=\"unsortable\" scope=\"col\"&gt;Presentation and notes\n&lt;/th&gt;&lt;/tr&gt;\n\n\n\n#extract the column names from the header\nprefix_header = [ head.text.strip() for head in header.select(\"th\") ]\nprefix_header\n\n['Country or region', 'Registration prefix', 'Presentation and notes']\n\n\n\n#select all non-header rows from the table\nrow_els = table.select(\"tbody tr\")[1:] #skip the first row, which is the header\nlen(row_els)\n\n240\n\n\n\n#extract the text from each row into a python list\n\nprefix_entries = [\n    [cell.text.strip() for cell in row.select(\"td\")]\n    for row in row_els\n]\n\nprefix_entries[0]\n\n['Afghanistan', 'YA[1]', 'YA-AAA to YA-ZZZ.']\n\n\n\n#turn the extracted data into a dataframe\nprefix_df = pd.DataFrame(prefix_entries, columns=prefix_header)\nprefix_df.head()\n\n\n\n\n\n\n\n\nCountry or region\nRegistration prefix\nPresentation and notes\n\n\n\n\n0\nAfghanistan\nYA[1]\nYA-AAA to YA-ZZZ.\n\n\n1\nAlbania\nZA[2]\nZA-AAA to ZA-ZZZ.\n\n\n2\nAlgeria\n7T[3]\n7T-VAA to 7T-VZZ Civilian.\\n7T-WAA to 7T-WZZ M...\n\n\n3\nAndorra\nC3[2]\nC3-AAA to C3-ZZZ\n\n\n4\nAngola\nD2[3]\nD2-AAA to D2-ZZZ. Colonial allocation CR-L.\n\n\n\n\n\n\n\n\n#drop the brackets and number within each bracket from the 'Registration prefix' column\nprefix_df['Registration prefix'] = prefix_df['Registration prefix'].str.replace(r'\\s*\\[.*?\\]$', '', regex=True)\n\n\nprefix_df.head()\n\n\n\n\n\n\n\n\nCountry or region\nRegistration prefix\nPresentation and notes\n\n\n\n\n0\nAfghanistan\nYA\nYA-AAA to YA-ZZZ.\n\n\n1\nAlbania\nZA\nZA-AAA to ZA-ZZZ.\n\n\n2\nAlgeria\n7T\n7T-VAA to 7T-VZZ Civilian.\\n7T-WAA to 7T-WZZ M...\n\n\n3\nAndorra\nC3\nC3-AAA to C3-ZZZ\n\n\n4\nAngola\nD2\nD2-AAA to D2-ZZZ. Colonial allocation CR-L.\n\n\n\n\n\n\n\n\nMake new DataFrame that specifies where each plane in the data was registered based on the registration prefix\n\nreg_country_df = pd.merge(df, prefix_df, left_on='tail_prefix', right_on='Registration prefix', how='inner')\n\n\n#Drop the extra columns after the merge\nreg_country_df = reg_country_df.drop(columns=[\"Registration prefix\", \"Presentation and notes\"])\n#Make sure the country listed for the blank tail_prefix is also blank\nreg_country_df.loc[reg_country_df['tail_prefix'] == '', 'Country or region'] = ''\nreg_country_df\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\nCountry or region\n\n\n\n\n0\n151d9c\nRA-73116\nBoeing 737-8LJ\nRA\nRussia\n\n\n1\n15206f\nRA-73839\nAirbus A321-251NX\nRA\nRussia\n\n\n2\n151d77\nRA-73079\nBoeing 767-3Y0ER\nRA\nRussia\n\n\n3\n14f110\nRA-61712\nAntonov An-148-100EA\nRA\nRussia\n\n\n4\n151e32\nRA-73266\nBoeing 737-83N\nRA\nRussia\n\n\n...\n...\n...\n...\n...\n...\n\n\n1078\n51408c\n4L-GTI\nBoeing 737-7CT\n4L\nGeorgia\n\n\n1079\n09a055\nC5-SUV\nEmbraer ERJ 135BJ Legacy 650\nC5\nGambia\n\n\n1080\n504e64\nER-00006\nAirbus A320-232\nER\nMoldova\n\n\n1081\n515313\nEY-787\nBoeing 737-8GJ\nEY\nTajikistan\n\n\n1082\n06a0b3\nA7-BCO\nBoeing 787-8\nA7\nQatar\n\n\n\n\n1083 rows × 5 columns\n\n\n\nI noticed that the new DataFrame has extra rows, and realize the tail prefix ‘B’ is being attributed to both China and Taiwan\n\nreg_country_df[reg_country_df['tail_prefix'] == 'B']\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\nCountry or region\n\n\n\n\n891\n78122f\nB-8862\nAirbus A330-343E\nB\nChina\n\n\n892\n78122f\nB-8862\nAirbus A330-343E\nB\nTaiwan\n\n\n893\n78076e\nB-2088\nBoeing 777-39LER\nB\nChina\n\n\n894\n78076e\nB-2088\nBoeing 777-39LER\nB\nTaiwan\n\n\n895\n781094\nB-8678\nAirbus A330-343E\nB\nChina\n\n\n...\n...\n...\n...\n...\n...\n\n\n966\n78086c\nB-2031\nBoeing 777-39LER\nB\nTaiwan\n\n\n967\n780ef8\nB-8287\nAirbus A330-343E\nB\nChina\n\n\n968\n780ef8\nB-8287\nAirbus A330-343E\nB\nTaiwan\n\n\n969\n780c9e\nB-2006\nBoeing 777-39LER\nB\nChina\n\n\n970\n780c9e\nB-2006\nBoeing 777-39LER\nB\nTaiwan\n\n\n\n\n80 rows × 5 columns\n\n\n\nAccording to the Wikipedia page, planes registered in China have tail number B- followed by 4 numbers, and planes registered in Taiwan have B- followed by 5 numbers. Let’s fix it…\n\n#Check how many tail numbers in the df that start with 'B-' are followed by 4 characters\ncount_4_characters = df[df['tail'].str.match(r'^B-\\w{4}$', na=False)].shape[0]\ncount_4_characters\n\n40\n\n\n\n#Check how many tail numbers in the df that start with 'B-' are followed by 5 characters\ncount_5_characters = df[df['tail'].str.match(r'^B-\\w{5}$', na=False)].shape[0]\ncount_5_characters\n\n0\n\n\nSince all are followed by 4 characters, we can conclude they are registered in China, and not Taiwan\n\n#Drop row from reg_country_df where 'Country or region' = Taiwan\nreg_country_df = reg_country_df[(reg_country_df['Country or region'] != 'Taiwan')]\nreg_country_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 1043 entries, 0 to 1082\nData columns (total 5 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   icao               1043 non-null   object\n 1   tail               1038 non-null   object\n 2   plane              1043 non-null   object\n 3   tail_prefix        1043 non-null   object\n 4   Country or region  1043 non-null   object\ndtypes: object(5)\nmemory usage: 48.9+ KB\n\n\n\n#Export as csv\nreg_country_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/reg_country.csv\", index = False)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WELCOME!",
    "section": "",
    "text": "Bulk flight data from Icarus — ADSB-Exchange data made available by C4ADS — contains each plane’s unique ICAO, but is missing the “good stuff” you need when looking for story leads: the tail number, which indicates where a plane’s registered, and the type of plane, which can be used to determine if it’s used as a commercial, military or private plane.\nFor this project I took a large set of ADBS-Exchange flight data (one month of flights from Moscow) and used info from RadarBox to enrich it with this valuable information.\nI wrote the code so the following steps, which are broken down in the Notebooks on this page, can be replicated with any and all bulk flight data pulled from Icarus in the future.\n\nClean up the original data\nUse the ICAO of each plane to scrape the tail number and plane make/model from RadarBox\nUse the tail number to determine where each plane is registered\nTake each plane make/model and ask ChatGPT if it’s typically a commercial, military or private plane\nPull the enhanced data together to answer questions like where are the private planes registered or where did the military planes fly\n\nLastly, I used DataTables to turn the enhanced data into searchable tables to make it easier to query the data and find intersting leads."
  },
  {
    "objectID": "clean-original.html",
    "href": "clean-original.html",
    "title": "Clean original ADSB-Exchange Flight Data",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n\nImport flight data\nAll flights from Moscow between May 24 - June 24, 2023 (pulled from Icarus)\n\ndf = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/icarus_flights.csv\")\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9026 entries, 0 to 9025\nData columns (total 10 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   icao                 9026 non-null   object\n 1   call_sign            8566 non-null   object\n 2   start_time           9026 non-null   object\n 3   end_time             9026 non-null   object\n 4   origin_area          9026 non-null   object\n 5   origin_country       9026 non-null   object\n 6   destination_area     8433 non-null   object\n 7   destination_country  8429 non-null   object\n 8   aircraft_model       1950 non-null   object\n 9   aircraft_model_code  1950 non-null   object\ndtypes: object(10)\nmemory usage: 705.3+ KB\n\n\n\n\nCheck out the data\n\nShow all origin locations\nThe “Moscow” search on Icarus includes flights from cities near Moscow\n\norigin_counts = df.groupby('origin_area').size().reset_index(name='count')\norigin_counts.sort_values(by='count', ascending=False).reset_index(drop=True)\n\n\n\n\n\n\n\n\norigin_area\ncount\n\n\n\n\n0\nMoskovsskaya\n5347\n\n\n1\nMoskva\n2904\n\n\n2\nVladimir\n260\n\n\n3\nKaluga\n247\n\n\n4\nTula\n65\n\n\n5\nYaroslavl'\n60\n\n\n6\nRyazan'\n53\n\n\n7\nTver'\n45\n\n\n8\nIvanovo\n41\n\n\n9\nNizhegorod\n3\n\n\n10\nSmolensk\n1\n\n\n\n\n\n\n\n\nGroup together Moskovsskaya and Moskva to make “Moscow”\n\nreplacements = {\n    'Moskovsskaya': 'Moscow',\n    'Moskva': 'Moscow'\n}\n\ndf['origin_area'] = df['origin_area'].replace(replacements)\n\n\n\n\nShow all destination countries\n\ndest_country_counts = df.groupby('destination_country').size().reset_index(name='count')\ndest_country_counts.sort_values(by='count', ascending=False).reset_index(drop=True)\ndest_country_counts\n\n\n\n\n\n\n\n\ndestination_country\ncount\n\n\n\n\n0\nAl Muḩarraq\n9\n\n\n1\nAlgeria\n1\n\n\n2\nArmenia\n173\n\n\n3\nAzerbaijan\n102\n\n\n4\nBangladesh\n1\n\n\n5\nBelarus\n136\n\n\n6\nBelgium\n3\n\n\n7\nCuba\n3\n\n\n8\nDemocratic Republic of the Congo\n1\n\n\n9\nEgypt\n73\n\n\n10\nEstonia\n1\n\n\n11\nFinland\n12\n\n\n12\nGeorgia\n99\n\n\n13\nGermany\n2\n\n\n14\nGreece\n1\n\n\n15\nIndia\n19\n\n\n16\nIran\n20\n\n\n17\nIraq\n5\n\n\n18\nIsrael\n15\n\n\n19\nJordan\n11\n\n\n20\nKazakhstan\n270\n\n\n21\nKuwait\n8\n\n\n22\nKyrgyzstan\n12\n\n\n23\nLatvia\n1\n\n\n24\nLithuania\n2\n\n\n25\nMoldova\n1\n\n\n26\nMongolia\n2\n\n\n27\nMorocco\n3\n\n\n28\nMozambique\n2\n\n\n29\nNorway\n1\n\n\n30\nOman\n13\n\n\n31\nPakistan\n2\n\n\n32\nPalestine\n1\n\n\n33\nPeople's Republic of China\n72\n\n\n34\nPoland\n4\n\n\n35\nQatar\n2\n\n\n36\nRomania\n1\n\n\n37\nRussia\n6213\n\n\n38\nSaudi Arabia\n4\n\n\n39\nSerbia\n17\n\n\n40\nSeychelles\n2\n\n\n41\nSouth Korea\n1\n\n\n42\nSri Lanka\n6\n\n\n43\nSyria\n2\n\n\n44\nTajikistan\n136\n\n\n45\nThailand\n3\n\n\n46\nTunisia\n2\n\n\n47\nTurkey\n602\n\n\n48\nTurkmenistan\n3\n\n\n49\nUkraine\n1\n\n\n50\nUnited Arab Emirates\n203\n\n\n51\nUzbekistan\n149\n\n\n52\nVenezuela\n1\n\n\n\n\n\n\n\n\n\nAll destination ‘areas’\n\ndest_area_counts = df.groupby('destination_area').size().reset_index(name='count')\ndest_area_counts.sort_values(by='count', ascending=False).reset_index(drop=True)\ndest_area_counts.head()\n\n\n\n\n\n\n\n\ndestination_area\ncount\n\n\n\n\n0\nAbkhazia\n17\n\n\n1\nAbu Dhabi\n22\n\n\n2\nAbşeron\n1\n\n\n3\nAd Dakhliyah\n2\n\n\n4\nAd Daqahliyah\n2\n\n\n\n\n\n\n\n\n\nClean the destination names in the df\n\nreplacements = {\n    'Moskovsskaya': 'Moscow',\n    'Moskva': 'Moscow',\n    'City of St. Petersburg': 'St. Petersburg',\n    'Ad Daqahliyah': 'Ad Dakhliyah'\n}\n\ndf.loc[:, 'destination_area'] = df['destination_area'].replace(replacements)\n\n\nreplacements = {\n    'Al Muḩarraq': 'Bahrain'\n}\n\ndf.loc[:,'destination_country'] = df['destination_country'].replace(replacements)\n\n\n\n\nCreate symbol map of all flight destinations\n\nMake new df that combines area and country for map viz\n\ndf['area_country'] = df['destination_area'] + ', ' + df['destination_country']\n\n\ndesintation_counts_df = df[\"area_country\"].value_counts().reset_index()\n\ndesintation_counts_df\n\n\n\n\n\n\n\n\narea_country\ncount\n\n\n\n\n0\nMoscow, Russia\n869\n\n\n1\nSt. Petersburg, Russia\n620\n\n\n2\nStavropol', Russia\n330\n\n\n3\nTatarstan, Russia\n278\n\n\n4\nSverdlovsk, Russia\n274\n\n\n...\n...\n...\n\n\n232\nZSHC - Hangzhou Xiaoshan International Airport...\n1\n\n\n233\nIaloveni, Moldova\n1\n\n\n234\nShida Kartli, Georgia\n1\n\n\n235\nCluj, Romania\n1\n\n\n236\nGöyçay, Azerbaijan\n1\n\n\n\n\n237 rows × 2 columns\n\n\n\n\n\n\n\n#save both DataFrames as csv\ndesintation_counts_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/destination_counts.csv\")\n\n\ndf.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/icarus_flights_cleaned.csv\", index=False)"
  },
  {
    "objectID": "wrap-up.html",
    "href": "wrap-up.html",
    "title": "Pull it all together",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nNow we want to combine the DataFrames so we can analyze the data to find interesting leads"
  },
  {
    "objectID": "wrap-up.html#first-lets-look-at-the-individual-plane-info-without-the-flight-details",
    "href": "wrap-up.html#first-lets-look-at-the-individual-plane-info-without-the-flight-details",
    "title": "Pull it all together",
    "section": "First, let’s look at the individual plane info without the flight details",
    "text": "First, let’s look at the individual plane info without the flight details\nThis way we can discover where all the private and military planes are registered, for instance\n\nreg_country_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/reg_country.csv\")\nplane_type_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/plane_type.csv\")\n\n\ncountry_type_df = pd.merge(reg_country_df, plane_type_df, left_on='plane', right_on='Plane', how='inner')\ncountry_type_df.drop('Plane', axis=1, inplace=True)\ncountry_type_df.drop('tail_prefix', axis=1, inplace=True)\n\n\ncountry_type_df.rename(columns={'plane': 'plane_model', 'Country or region': 'reg_country'}, inplace=True)\n\n\nNow we can use python to answer some of those questions:\n\nWhere are the private planes registered?\n\nprivate_planes_df = country_type_df[country_type_df['type'] == 'PRIVATE']\nprivate_planes_df.groupby('reg_country').size()\n\nreg_country\nAlgeria            1\nArmenia            1\nAzerbaijan         1\nBelarus            1\nChina              1\nCzech Republic     1\nGambia             1\nGermany            1\nKazakhstan         6\nRussia            83\nTurkey             1\ndtype: int64\n\n\n\n\nThe below code allows you to get more information on the private planes registered in the specified country\n\nprivate_planes_df[private_planes_df['reg_country'] == 'Armenia']\n\n\n\n\n\n\n\n\nicao\ntail\nplane_model\nreg_country\ntype\nmax_passengers\n\n\n\n\n991\n600009\nEK-222\nSOCATA TBM 940\nArmenia\nPRIVATE\n6\n\n\n\n\n\n\n\n\n\nWhat about the military planes?\n\nmilitary_planes_df = country_type_df[country_type_df['type'] == 'MILITARY']\nmilitary_planes_df.groupby('reg_country').size()\n\nreg_country\nAzerbaijan       1\nRussia          19\nSyria            1\nTurkmenistan     1\ndtype: int64\n\n\n\n\nThe same code allows you to get more information on the military planes registered in the specified country\n\nmilitary_planes_df[military_planes_df['reg_country'] == 'Syria']\n\n\n\n\n\n\n\n\nicao\ntail\nplane_model\nreg_country\ntype\nmax_passengers\n\n\n\n\n1037\n778681\nYK-ATA\nIlyushin Il-76T\nSyria\nMILITARY\nUNKNOWN\n\n\n\n\n\n\n\n\n\n\nalt text\n\n\n\n\n\nEven better, export the DataFrame as a DataTables table for easy filtering and querying\n\ncountry_type_table = country_type_df.to_html(index=False)\n\n\nwith open('country_type_table.html', 'w') as f:\n    f.write(country_type_table)\n\n\n# but always save it as a csv, too\n\ncountry_type_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/country_type.csv\", index=False)"
  },
  {
    "objectID": "wrap-up.html#now-lets-create-the-ultimate-dataframe-that-combines-all-flight-data-with-the-indentifying-plane-information",
    "href": "wrap-up.html#now-lets-create-the-ultimate-dataframe-that-combines-all-flight-data-with-the-indentifying-plane-information",
    "title": "Pull it all together",
    "section": "Now, let’s create the ultimate DataFrame that combines all flight data with the indentifying plane information",
    "text": "Now, let’s create the ultimate DataFrame that combines all flight data with the indentifying plane information\nNow we can ask the data questions like where all private planes that took off from Moscow have flown, for instance\n\noriginal_flight_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/icarus_flights_cleaned.csv\")\n\n\n#merge the original flight df with the df above that indicates each planes registration country and category\nfinal_flights_df = pd.merge(original_flight_df, country_type_df, on='icao', how='left')\n\n\n#clean it up\nfinal_flights_df.drop(columns=['aircraft_model', 'aircraft_model_code', 'area_country'], inplace=True)\n\n\nfinal_flights_df.rename(columns={'Country or region': 'reg_country', 'type': 'plane_category'}, inplace=True)\n\n\nfinal_flights_df.rename(columns={'plane': 'plane_model'}, inplace=True)\n\n\nfinal_flights_df['max_passengers'] = final_flights_df['max_passengers'].str.upper()\n\n\nfinal_flights_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9026 entries, 0 to 9025\nData columns (total 13 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   icao                 9026 non-null   object\n 1   call_sign            8566 non-null   object\n 2   start_time           9026 non-null   object\n 3   end_time             9026 non-null   object\n 4   origin_area          9026 non-null   object\n 5   origin_country       9026 non-null   object\n 6   destination_area     8433 non-null   object\n 7   destination_country  8429 non-null   object\n 8   tail                 8876 non-null   object\n 9   plane_model          8882 non-null   object\n 10  reg_country          8872 non-null   object\n 11  plane_category       8882 non-null   object\n 12  max_passengers       8861 non-null   object\ndtypes: object(13)\nmemory usage: 916.8+ KB\n\n\n\nMake another DataTables table for easy filtering and querying\n\nfull_flight_table = final_flights_df.to_html(index=False)\n\n\nwith open('full_flight_table.html', 'w') as f:\n    f.write(full_flight_table)\n\n\n# and, again, save it as a csv\n\nfinal_flights_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/full_flight_data.csv\", index=False)"
  },
  {
    "objectID": "chat-gpt.html",
    "href": "chat-gpt.html",
    "title": "Use ChatGPT to determine the plane type",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport re\n\n\ndf = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/all_plane_info.csv\")\n\n\nMake list of all unique plane make/models from flight data\n\nunique_planes = []\n\nunique_planes.extend(df['plane'].unique().tolist())\n\n\nlen(unique_planes)\n\n224\n\n\n\n\nAsk ChatGPT\nTake each plane make/model from the data and ask ChatGPT whether it’s typically used as a private, commercial, military or helicopter.\n\nfrom dotenv import load_dotenv \nload_dotenv()\n\nAPI_KEY = os.getenv(\"PROJECT_API_KEY\")\n\n\nfrom langchain.chat_models import ChatOpenAI\nllm = ChatOpenAI(openai_api_key=API_KEY, model_name=\"gpt-3.5-turbo\")\n\n\ntemplate = \"\"\"\nCategorize the following airplane model as typically being used as either a\nprivate plane, commercial plane, military plane or helicopter. \nRespond with only the plane type: PRIVATE, COMMERCIAL, MILITARY, HELICOPTER. \nThen print the maximum number of passengers the plane model can hold, \nseparated from the plane type with a comma. Don't print anything else after the number of passengers.\nIf you're unable to determine the type of plane, simply print UNKNOWN\n\nAirplane model: Boeing 737\nResponse: COMMERCIAL, 132\n\nAirplane model: {plane_model}\nResponse:\"\"\"\n\nresults = []  \n\nfor plane in unique_planes:\n    prompt = template.format(plane_model=plane)\n    response = llm.predict(prompt)\n    results.append([plane, response])\n\n# Create a DataFrame from the 'results' list\nplane_type_df = pd.DataFrame(results, columns=['Plane', 'Info'])\n\n\nSave the ChatGPT results to a csv\nThis is to avoid having to run it through again\n\nplane_type_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/gpt_results.csv\", index=False)\n\n\nlen(plane_type_df)\n\n224\n\n\n\n\n\nClean up the resulting DataFrame\n\n#Split up the ChatGPT answers into two columns\nplane_type_df[['type', 'max_passengers']] = plane_type_df['Info'].str.split(',', expand=True)\n\n\nplane_type_df.drop(columns=['Info'], inplace=True)\n\n\nplane_type_df\n\n\n\n\n\n\n\n\nPlane\ntype\nmax_passengers\n\n\n\n\n0\nBoeing 737-8LJ\nCOMMERCIAL\n132\n\n\n1\nBoeing 737-958ER\nCOMMERCIAL\n189\n\n\n2\nAirbus A321-251NX\nCOMMERCIAL\n240\n\n\n3\nBoeing 767-3Y0ER\nCOMMERCIAL\n375\n\n\n4\nAirbus A320-214\nCOMMERCIAL\n150\n\n\n...\n...\n...\n...\n\n\n219\nBoeing 737-8S3\nCOMMERCIAL\n189\n\n\n220\nBoeing 757-28A\nCOMMERCIAL\n239\n\n\n221\nGulfstream Aerospace G-IV-SP\nPRIVATE\n19\n\n\n222\nAirbus A330-223\nCOMMERCIAL\n440\n\n\n223\nTupolev Tu-214VPU\nMILITARY\nUNKNOWN\n\n\n\n\n224 rows × 3 columns\n\n\n\n\n#Save it as csv\nplane_type_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/plane_type.csv\", index=False)\n\n\n\nBreak down how many of each plane category are in the data\n\nplane_type_counts = plane_type_df.groupby('type').size().reset_index(name='count')\nplane_type_counts\n\n\n\n\n\n\n\n\ntype\ncount\n\n\n\n\n0\nCOMMERCIAL\n146\n\n\n1\nHELICOPTER\n8\n\n\n2\nMILITARY\n13\n\n\n3\nPRIVATE\n52\n\n\n4\nUNKNOWN\n5\n\n\n\n\n\n\n\n\nVisualize it as a bar chart\n\nplt.figure(figsize=(10, 6))  # Set the size of the plot\nplt.bar(plane_type_counts['type'], plane_type_counts['count'], color='skyblue')\nplt.xlabel('Aircraft Type')\nplt.ylabel('Count')\nplt.title('Aircraft Type Count')\nplt.xticks(rotation=45)\nplt.tight_layout()"
  },
  {
    "objectID": "radarbox_scrape.html",
    "href": "radarbox_scrape.html",
    "title": "Scrape Radarbox for more plane details",
    "section": "",
    "text": "import os\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport re\nimport time\n\n\ndf = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/icarus_flights_cleaned.csv\")\n\nThe first attempt at scraping from Radarbox resulted in a number of blank pages, meaning Radarbox doesn’t have webpages or data on some of the ICAOs. I found that, in some cases, it’s because some ICAOs are missing a ‘0’ at the front. To maximize the number of pages pulled from Radarbox, I put a ‘0’ in front of every ICAO with fewer than 6 characters.\n\nAdd a 0 to the front of every icao &lt; 6 characters\n\ndf.loc[df['icao'].str.len() &lt; 6, 'icao'] = '0' + df['icao']\n\n\n\nPull all unique ICAOs from the DataFrame\nThese will be used to scrape Radarbox profiles for the planes’ tail numbers and make/model\nRadarbox urls are formatted https://www.radarbox.com/data/mode-s/{ICAO}\n\nunique_icaos = df['icao'].unique().tolist()\nlen(unique_icaos)\n\n1063\n\n\n\n\nSave the html for each available RadarBox page\n\ndirectory = \"/Users/karinashedrofsky/LEDE_2023/flights-project/radarbox-htmls\"\nbase_url = \"https://www.radarbox.com/data/mode-s/\"\n\n\nfor icao in unique_icaos:\n    try:\n        # Construct the URL for each ICAO code by appending it to the base URL\n        url = base_url + icao\n\n        response = requests.get(\n            url,\n            headers={\"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.79 Safari/537.36\"}\n        )\n\n        # Save HTML content to a separate file in the 'radarbox-htmls' directory\n        file_name = icao + \".html\"\n        file_path = os.path.join(directory, file_name)\n        \n        if os.path.exists(file_path): #skip scraping webpages for icaos that have already been scraped\n            continue\n\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(response.text)\n\n        print(\"HTML content saved to:\", file_path)\n\n        # Add a pause of 2 seconds between each iteration\n        time.sleep(2)\n\n    except Exception as e:\n        print(f\"Error occurred for ICAO code: {icao}\")\n        print(f\"Error message: {str(e)}\")\n\n\n\nCheck for all htmls that didn’t scrape properly and delete them from the directory\nThis is based on file size. All htmls without detailed plane information on RadarBox are &lt; 252,000 bytes\n\nfailed_icaos = []\n\n# Get a list of all files in the directory\nfile_list = os.listdir(directory)\n\n\nfor file_name in file_list:\n    file_path = os.path.join(directory, file_name)\n    \n    \n    # Check if the file is smaller than 252000 bytes\n    if os.path.getsize(directory + '/' + file_name) &lt; 252000:\n        # Make a list of all icaos that don't have populated Radarbox page (append file name without the \".html\" extension)\n        file_name_without_extension = file_name[:-5] \n        failed_icaos.append(file_name_without_extension)\n\n        try:\n            # Delete the file from directory\n            os.remove(file_path)\n            print(f\"Deleted file: {file_path}\")\n        except OSError as e:\n            print(f\"Error occurred while deleting {file_path}: {str(e)}\")\n            \n#show the list of all of the icaos that don't have a populated Radarbox page\nprint(failed_icaos)\n\n[]\n\n\n\n\nScrape tail number and plane type from each planes Radarbox page\n\ndata_list = []\n\n# Loop through each HTML file in the radarbox_htmls directory\nfor filename in os.listdir(directory):\n    if filename.endswith(\".html\"):\n        file_path = os.path.join(directory, filename)\n        with open(file_path, 'r', encoding='utf-8') as file:\n            html = file.read()\n\n        soup = BeautifulSoup(html)\n\n        # Take the icao from the filename (without the \".html\" extension)\n        icao = filename.replace(\".html\", \"\")\n\n        # Extract the tail number from the HTML content\n        try:\n            tail = soup.select(\"#secondary\")[0].text\n        except IndexError:\n            tail = \"\"\n        # Extract the plane model from the HTML content\n        try:\n            plane = soup.select(\"#aircraft-info .full-width #value\")[0].text\n        except IndexError:\n            plane = \"\"\n\n        # Append the extracted data to the data_list\n        data_list.append([icao, tail, plane])\n\n# Create a DataFrame from the data_list with appropriate column names\nradarbox_details_df = pd.DataFrame(data_list, columns=[\"icao\", \"tail\", \"plane\"])\n\n\nradarbox_details_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1052 entries, 0 to 1051\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   icao    1052 non-null   object\n 1   tail    1052 non-null   object\n 2   plane   1052 non-null   object\ndtypes: object(3)\nmemory usage: 24.8+ KB\n\n\n\nradarbox_details_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/radarbox_details.csv\", index=False)\n\n\n\nIdentify the missing data\nSome planes have populated RadarBox profiles but are still missing details on the tail number and plane type\nThere are other websites other than Radarbox that contain this info, so they can be checked manually\n\nblank = radarbox_details_df[radarbox_details_df['tail'] == '']\nblank\n\n\n\n\n\n\n\n\nicao\ntail\nplane\n\n\n\n\n193\n1418d8\n\n-\n\n\n229\n14fa0a\n\n-\n\n\n304\n466b38\n\n-\n\n\n312\n152c2e\n\n-\n\n\n418\n142586\n\n-\n\n\n436\n4b850c\n\n-\n\n\n507\n140ac5\n\n-\n\n\n508\n1506a6\n\n-\n\n\n514\n032091\n\n-\n\n\n577\n1506aa\n\n-\n\n\n584\n1533ad\n\n-\n\n\n673\n14fa0e\n\n-\n\n\n677\n150690\n\n-\n\n\n682\n600be9\n\n-\n\n\n718\nea000f\n\n-\n\n\n770\n15064b\n\n-\n\n\n775\n26002b\n\n-\n\n\n826\n1427dc\n\n-\n\n\n870\n152c2a\n\n-\n\n\n941\n155bdd\n\n-\n\n\n947\n152c07\n\n-\n\n\n949\n15069a\n\n-\n\n\n\n\n\n\n\n\n\nRead in manually checked data\nSince there were only 22, I manually checked all ICAOs without info in Radarbox and created a separate csv\nThe link to the data sources can be found in the csv file in the directory\n\nmanual_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/manual-plane-data.csv\")\nmanual_df.drop('link', axis=1, inplace=True)\nmanual_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 22 entries, 0 to 21\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   icao    22 non-null     object\n 1   tail    17 non-null     object\n 2   plane   17 non-null     object\ndtypes: object(3)\nmemory usage: 656.0+ bytes\n\n\n\nCombine the scraped plane info with manually identified plane info\n\n# Create a copy of radarbox_details_df to make a new DataFrame for the updates\nupdated_plane_df = radarbox_details_df.copy()\n\n# Set 'icao' as the index for both DataFrames\nupdated_plane_df.set_index('icao', inplace=True)\nmanual_df.set_index('icao', inplace=True)\n\n# Update the values in updated_plane_df with the values from manual_df where there's an icao match\nupdated_plane_df.update(manual_df)\n\n# Reset the index to bring 'icao' back as a regular column\nupdated_plane_df.reset_index(inplace=True)\n\n\nupdated_plane_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1052 entries, 0 to 1051\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   icao    1052 non-null   object\n 1   tail    1052 non-null   object\n 2   plane   1052 non-null   object\ndtypes: object(3)\nmemory usage: 24.8+ KB\n\n\nWe’re still left with a few icaos that couldn’t be identified manually or by scraping Radarbox…\n\nupdated_plane_df[updated_plane_df[\"tail\"] == '']\n\n\n\n\n\n\n\n\nicao\ntail\nplane\n\n\n\n\n304\n466b38\n\n-\n\n\n514\n032091\n\n-\n\n\n682\n600be9\n\n-\n\n\n718\nea000f\n\n-\n\n\n775\n26002b\n\n-\n\n\n\n\n\n\n\n\n#save as csv\nupdated_plane_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/all_plane_info.csv\", index = False)"
  },
  {
    "objectID": "plane-registration-check.html#make-new-column-in-dataframe-for-beginning-characters-of-tail-number",
    "href": "plane-registration-check.html#make-new-column-in-dataframe-for-beginning-characters-of-tail-number",
    "title": "Use tail number to analyze where each plane was registered",
    "section": "Make new column in DataFrame for beginning characters of tail number",
    "text": "Make new column in DataFrame for beginning characters of tail number\nUsually the beginning of a tail number indicates the registration country\n\n# Check if the \"tail\" column contains a hyphen\nhas_hyphen = df['tail'].str.contains('-', na=False)\n\n# Extract the characters before the hyphen \nextracted_tail = df['tail'].str.extract(r'^(.*?)(?:-|$)')\n\n# For rows without hyphen, extract the first two letters that come *before numbers* in the \"tail\" column\nextracted_first_two_letters = df.loc[~has_hyphen, 'tail'].str.extract(r'^([A-Za-z]{2})\\d{2}')\n\n# Combine the extracted values and store them in a new \"tail_prefix\" column\ndf['tail_prefix'] = extracted_tail.where(has_hyphen, extracted_first_two_letters)\n\n# Set the values in the \"tail_prefix\" column to empty strings for rows that don't have hyphen or 2 letters followed by numbers\ndf.loc[~has_hyphen & df['tail_prefix'].isna(), 'tail_prefix'] = ''\n\n\ndf\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\n\n\n\n\n0\n151d9c\nRA-73116\nBoeing 737-8LJ\nRA\n\n\n1\n738057\n4X-EHI\nBoeing 737-958ER\n4X\n\n\n2\n15206f\nRA-73839\nAirbus A321-251NX\nRA\n\n\n3\n151d77\nRA-73079\nBoeing 767-3Y0ER\nRA\n\n\n4\n896411\nA6-AOE\nAirbus A320-214\nA6\n\n\n...\n...\n...\n...\n...\n\n\n1047\n155c35\nRA-89141\nSukhoi SuperJet 100-95B\nRA\n\n\n1048\n152015\nRA-73749\nAirbus A320-214\nRA\n\n\n1049\n151ffa\nRA-73722\nAirbus A321-211\nRA\n\n\n1050\n151ed3\nRA-73427\nAirbus A320-271N\nRA\n\n\n1051\n4bb855\nTC-NBU\nAirbus A320-251N\nTC\n\n\n\n\n1052 rows × 4 columns\n\n\n\n\nPrint all planes where registration country can’t be determined automatically\nThese could be interesting, so are worth checking manually\n\noutlier_tails = df[df['tail_prefix'] == '']\noutlier_tails\n\n\n\n\n\n\n\n\nicao\ntail\nplane\ntail_prefix\n\n\n\n\n86\n60003c\n701\nAirbus A319-132\n\n\n\n176\n155c40\n89152\nSukhoi Superjet 100-95B\n\n\n\n304\n466b38\nNaN\n-\n\n\n\n514\n032091\nNaN\n-\n\n\n\n580\n053977\nVARIOUS\nSeveral Different Aircraft\n\n\n\n682\n600be9\nNaN\n-\n\n\n\n718\nea000f\nNaN\n-\n\n\n\n775\n26002b\nNaN\n-\n\n\n\n837\n1f3395\n78741\nIlyushin Il-78M-90A\n\n\n\n\n\n\n\n\nQuick Google search of 053977 shows it may be a NATO plane\n\n\n\nhttps://discussions.flightaware.com/t/strange-id-053977-nato02-around-eindhoven-nl/30149"
  },
  {
    "objectID": "plane-registration-check.html#breakdown-where-the-planes-were-registered",
    "href": "plane-registration-check.html#breakdown-where-the-planes-were-registered",
    "title": "Use tail number to analyze where each plane was registered",
    "section": "Breakdown where the planes were registered",
    "text": "Breakdown where the planes were registered\n\nregistration_counts = reg_country_df.groupby('Country or region').size().reset_index(name='count').sort_values(by='count', ascending=False)\n\n\nregistration_counts\n\n\n\n\n\n\n\n\nCountry or region\ncount\n\n\n\n\n23\nRussia\n725\n\n\n28\nTurkey\n71\n\n\n30\nUnited Arab Emirates\n64\n\n\n6\nChina\n40\n\n\n31\nUzbekistan\n16\n\n\n16\nKazakhstan\n14\n\n\n8\nEgypt\n13\n\n\n5\nBelarus\n11\n\n\n2\nArmenia\n10\n\n\n0\n\n9\n\n\n3\nAzerbaijan\n9\n\n\n13\nIran\n8\n\n\n24\nSerbia\n7\n\n\n18\nKyrgyzstan\n6\n\n\n14\nIraq\n4\n\n\n15\nIsrael\n4\n\n\n17\nKuwait\n4\n\n\n29\nTurkmenistan\n4\n\n\n20\nMorocco\n3\n\n\n21\nOman\n3\n\n\n1\nAlgeria\n3\n\n\n11\nGeorgia\n2\n\n\n9\nEthiopia\n2\n\n\n25\nSyria\n2\n\n\n4\nBahrain\n1\n\n\n27\nTunisia\n1\n\n\n7\nCzech Republic\n1\n\n\n10\nGambia\n1\n\n\n26\nTajikistan\n1\n\n\n22\nQatar\n1\n\n\n19\nMoldova\n1\n\n\n12\nGermany\n1\n\n\n32\nVenezuela\n1"
  },
  {
    "objectID": "wrap-up.html#look-at-plane-info-without-the-flight-details",
    "href": "wrap-up.html#look-at-plane-info-without-the-flight-details",
    "title": "Pull it all together",
    "section": "Look at plane info without the flight details",
    "text": "Look at plane info without the flight details\nThis way we can answer questions like where all the private and military planes are registered, for instance\n\nreg_country_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/reg_country.csv\")\nplane_type_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/plane_type.csv\")\n\n\ncountry_type_df = pd.merge(reg_country_df, plane_type_df, left_on='plane', right_on='Plane', how='inner')\ncountry_type_df.drop('Plane', axis=1, inplace=True)\ncountry_type_df.drop('tail_prefix', axis=1, inplace=True)\n\n\ncountry_type_df.rename(columns={'plane': 'plane_model', 'Country or region': 'reg_country'}, inplace=True)"
  },
  {
    "objectID": "wrap-up.html#use-python-to-answer-some-of-those-questions",
    "href": "wrap-up.html#use-python-to-answer-some-of-those-questions",
    "title": "Pull it all together",
    "section": "Use python to answer some of those questions:",
    "text": "Use python to answer some of those questions:\n\nWhere are the private planes registered?\n\nprivate_planes_df = country_type_df[country_type_df['type'] == 'PRIVATE']\nprivate_planes_df.groupby('reg_country').size()\n\nreg_country\nAlgeria            1\nArmenia            1\nAzerbaijan         1\nBelarus            1\nChina              1\nCzech Republic     1\nGambia             1\nGermany            1\nKazakhstan         6\nRussia            83\nTurkey             1\ndtype: int64\n\n\nThe code below allows you to get more information on the private planes registered in the specified country\n\nprivate_planes_df[private_planes_df['reg_country'] == 'Armenia']\n\n\n\n\n\n\n\n\nicao\ntail\nplane_model\nreg_country\ntype\nmax_passengers\n\n\n\n\n991\n600009\nEK-222\nSOCATA TBM 940\nArmenia\nPRIVATE\n6\n\n\n\n\n\n\n\n\n\nWhat about the military planes?\n\nmilitary_planes_df = country_type_df[country_type_df['type'] == 'MILITARY']\nmilitary_planes_df.groupby('reg_country').size()\n\nreg_country\nAzerbaijan       1\nRussia          19\nSyria            1\nTurkmenistan     1\ndtype: int64\n\n\nThe same code allows you to get more information on the military planes registered in the specified country\n\nmilitary_planes_df[military_planes_df['reg_country'] == 'Syria']\n\n\n\n\n\n\n\n\nicao\ntail\nplane_model\nreg_country\ntype\nmax_passengers\n\n\n\n\n1037\n778681\nYK-ATA\nIlyushin Il-76T\nSyria\nMILITARY\nUNKNOWN\n\n\n\n\n\n\n\nA quick Google search shows this plane may be interesting\n\n\n\nhttps://www.linkedin.com/pulse/interesting-syrian-air-force-flights-rick-francona/\n\n\n\n\nExport the DataFrame as a DataTables table for easy filtering and querying\n\ncountry_type_table = country_type_df.to_html(index=False)\n\n\nwith open('country_type_table.html', 'w') as f:\n    f.write(country_type_table)\n\n\n# but always save it as a csv, too\n\ncountry_type_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/country_type.csv\", index=False)"
  },
  {
    "objectID": "wrap-up.html#create-the-ultimate-dataframe-that-combines-all-flight-data-with-the-enriched-plane-information",
    "href": "wrap-up.html#create-the-ultimate-dataframe-that-combines-all-flight-data-with-the-enriched-plane-information",
    "title": "Pull it all together",
    "section": "Create the ultimate DataFrame that combines all flight data with the enriched plane information",
    "text": "Create the ultimate DataFrame that combines all flight data with the enriched plane information\nNow we can ask the data questions like where all private planes that took off from Moscow have flown, for instance\n\noriginal_flight_df = pd.read_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/icarus_flights_cleaned.csv\")\n\n\n#merge the original flight df with the df above that indicates each planes registration country and category\nfinal_flights_df = pd.merge(original_flight_df, country_type_df, on='icao', how='left')\n\n\n#clean it up\nfinal_flights_df.drop(columns=['aircraft_model', 'aircraft_model_code', 'area_country'], inplace=True)\n\n\nfinal_flights_df.rename(columns={'Country or region': 'reg_country', 'type': 'plane_category'}, inplace=True)\n\n\nfinal_flights_df.rename(columns={'plane': 'plane_model'}, inplace=True)\n\n\nfinal_flights_df['max_passengers'] = final_flights_df['max_passengers'].str.upper()\n\n\nfinal_flights_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 9026 entries, 0 to 9025\nData columns (total 13 columns):\n #   Column               Non-Null Count  Dtype \n---  ------               --------------  ----- \n 0   icao                 9026 non-null   object\n 1   call_sign            8566 non-null   object\n 2   start_time           9026 non-null   object\n 3   end_time             9026 non-null   object\n 4   origin_area          9026 non-null   object\n 5   origin_country       9026 non-null   object\n 6   destination_area     8433 non-null   object\n 7   destination_country  8429 non-null   object\n 8   tail                 8876 non-null   object\n 9   plane_model          8882 non-null   object\n 10  reg_country          8872 non-null   object\n 11  plane_category       8882 non-null   object\n 12  max_passengers       8861 non-null   object\ndtypes: object(13)\nmemory usage: 916.8+ KB\n\n\n\nMake DataTables table for easy filtering and querying\n\nfull_flight_table = final_flights_df.to_html(index=False)\n\n\nwith open('full_flight_table.html', 'w') as f:\n    f.write(full_flight_table)\n\n\n# and, again, save it as a csv\n\nfinal_flights_df.to_csv(\"/Users/karinashedrofsky/LEDE_2023/flights-project/csvs/full_flight_data.csv\", index=False)"
  }
]